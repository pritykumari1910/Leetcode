/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

TreeNode* build(vector<int>&preorder ,int preS,int preE,vector<int>&postorder,int postS,int postE){
    if(preS>preE)
        return NULL;

    int k=preorder[preS];
    TreeNode *root=new TreeNode(k);

    if(preS==preE)
        return root;


    int left_r=preorder[preS+1];

    int i=postS;
    while(i<=postE){
        if(postorder[i]==left_r)
            break;
        i++;     
    }  
    int l=i-postS+1;

    root->left=build(preorder,preS+1,preS+l,postorder,postS,i);
    root->right=build(preorder,preS+1+l,preE,postorder,i+1,postE-1);
    return root;      
    
}
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        int n=preorder.size();
        return build(preorder,0,n-1,postorder,0,n-1);
        
    }
};
