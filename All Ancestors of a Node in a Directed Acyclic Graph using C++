class Solution {
public:
    vector<vector<int>> getAncestors(int n, vector<vector<int>>& edges) {
        
        int m =edges.size();
        vector<int>adj[n];
        vector<int>indegree(n);

        for(int i=0;i<m;i++){
            adj[edges[i][0]].push_back(edges[i][1]);
            indegree[edges[i][1]]++;

        }
        queue<int>q;
        for(int i=0;i<n;i++){
            if(indegree[i]==0)
                q.push(i);
        }

        set<int>s[n];
        while(!q.empty()){
            int curr =q.front();
            q.pop();

        

        for(auto it:adj[curr]){
            s[it].insert(curr);

            for(auto it1:s[curr])
               s[it].insert(it1);


               indegree[it]--;
               if(indegree[it]==0)
               q.push(it);
        }
        }
       vector<vector<int>>ans(n,vector<int>());

        for(int i=0;i<n;i++){
            ans[i]=vector<int>(s[i].begin(),s[i].end());

        }
        return ans;
    }
};
