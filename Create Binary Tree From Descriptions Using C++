/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */




class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
     unordered_map<int,TreeNode*>mp;
     unordered_set<int>ch;

     for(auto &arr:descriptions){
        int p=arr[0],child=arr[1],isleft=arr[2];
        ch.insert(child);
        if(mp.find(p)==mp.end()){
            mp[p]=new TreeNode(p);

        }
        if(mp.find(child)==mp.end()){
            mp[child]=new TreeNode(child);
        }

        if(isleft==1){
            mp[p]->left=mp[child];
        }
        else{
            mp[p]->right=mp[child];
        }
     }
     int root=-1;
     for(auto &arr:descriptions){
        if(ch.find(arr[0])==ch.end()){
            root=arr[0];
            break;
        }
     }
        return mp[root];
    }
};
