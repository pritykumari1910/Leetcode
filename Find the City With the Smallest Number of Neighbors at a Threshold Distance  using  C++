class Solution {
public:
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
         vector<vector<int>> dist(n, vector<int>(n, numeric_limits<int>::max()));


         for(int i=0;i<n;i++){
            dist[i][i]=0;
         }

         for(const auto& e:edges ){
            int u=e[0],v=e[1],w=e[2];
            dist[u][v]=w;
            dist[v][u]=w;
         }

         for(int k=0;k<n;k++){
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    if (dist[i][k] != numeric_limits<int>::max() && dist[k][j] != numeric_limits<int>::max()) {
                        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]);
                    }

                }
                
            }
         
         }
          // Find the city with the smallest number of reachable cities
        // and if there is a tie, choose the city with the greatest number.
        int minReachableCities = numeric_limits<int>::max();
        int bestCity = -1;
        
        for (int i = 0; i < n; ++i) {
            int reachableCities = 0;
            for (int j = 0; j < n; ++j) {
                if (dist[i][j] <= distanceThreshold) {
                    reachableCities++;
                }
            }
            
            if (reachableCities <= minReachableCities) {
                minReachableCities = reachableCities;
                bestCity = i;
            }
        }
        
        return bestCity;

    }
};
