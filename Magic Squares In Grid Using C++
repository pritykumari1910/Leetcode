class Solution {
public:
static bool isMagic(int i, int j, vector<vector<int>>& grid){
    //    if (grid[i][j] != 5) return 0;

    bitset<10>once;
    int rS[3]={0},cS[3]={0};
    for(int k=i-1;k<=i+1;k++){
        for(int l=j-1;l<=j+1;l++){
            int x=grid[k][l];
            if(x<1 || x>9)
                return 0;
            rS[k-i+1]+=x;
            cS[l-j+1]+=x;
            once.flip(x);    
        }
    }

    if(once.count()!=9)
        return 0;

    if(!all_of(rS,rS+3,[](int sum){return sum==15;})) return 0;   
    if(!all_of(cS,cS+3,[](int sum){return sum==15;})) return 0;  

    return (grid[i-1][j-1]+grid[i+1][j+1]==10 && grid[i+1][j-1]+grid[i-1][j+1]==10);
}
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        int n =grid.size();
        int m=grid[0].size();
        if(n<3 || m<3)
            return 0;
        int c=0;
        for(int i=1;i<n-1;i++){
            for(int j=1;j<m-1;j++){
                if(grid[i][j]==5)
                    c+=isMagic(i,j,grid);
            }
        }    

        return c;
    }
};
