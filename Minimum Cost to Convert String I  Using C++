class Solution {
public:

  void floyW(vector<vector<long long>>&adjM,vector<char>& original, vector<char>& changed,
   vector<int>& cost){

    for(int i=0;i<original.size();i++){
        int s=original[i]-'a';
        int t=changed[i]-'a';

        adjM[s][t]=min(adjM[s][t],(long long)cost[i] );
    }
    for(int k=0;k<26;k++){
        for(int i=0;i<26;i++){
            for(int j=0;j<26;j++){
                adjM[i][j]=min(adjM[i][j],adjM[i][k]+adjM[k][j]);
            }
        }
    }

  }
    long long minimumCost(string source, string target, vector<char>& original, vector<char>& changed, vector<int>& cost) {

       vector<vector<long long>>adjM(26,vector<long long>(26,INT_MAX));

       floyW(adjM,original,changed,cost); //update  adjN with shotest path using floyd warshal

       long long ans=0;

       for(int i=0;i<source.length();i++){
        if(source[i]==target[i]){
            continue;
        }
        if(adjM[source[i]-'a'][target[i]-'a']==INT_MAX){
            return -1;
        }
        ans+=adjM[source[i]-'a'][target[i]-'a'];
       }

      return ans;
        
    }
};
