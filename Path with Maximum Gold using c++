class Solution {
public:
int m,n;
vector<vector<int>>directions{{-1,0},{1,0},{0,1},{0,-1}};

int DFS(vector<vector<int>>& grid,int i,int j){
     if(i>=m ||i<0||j>=n||j<0||grid[i][j]==0){
        return 0;
        //zero glod
    }


    int OriginalV=grid[i][j];

    grid[i][j]=0;
    int maxG=0;
/*
    DFS(grid,i-1,j);//up
    DFS(grid,i+1,j);//down
    DFS(grid,i,j+1);//right
    DFS(grid,i,j-1);//left

*/

    //up,down,left,right

    for(vector<int>&dir:directions){
        int new_i=i+dir[0];
        int  new_j=j+dir[1];

        maxG=max(maxG,DFS(grid,new_i,new_j));
    }

    grid[i][j]=OriginalV;
    return OriginalV+maxG;


}
    int getMaximumGold(vector<vector<int>>& grid) {

      m=grid.size();
      n =grid[0].size();
     int maxG=0;
     for(int i=0;i<m;i++){
        for(int j=0;j<n;j++){
            if(grid[i][j]!=0){
                maxG=max(maxG,DFS(grid,i,j));
            }
        }
     }

     return maxG;
        
    }
};
