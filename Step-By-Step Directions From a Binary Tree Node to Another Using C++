/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    bool getpath(TreeNode *root, int x, string &str) {
        if (root->val == x) return true;
        //If node exists in left subtree, then we would get the true from left
        //hence we need to go to left subtree from the current root node
        if (root->left && getpath(root->left, x, str))  str += 'L';
        else if (root->right && getpath(root->right, x, str))   str += 'R';
        return str.size() > 0;


    }

    string getDirections(TreeNode* root, int startValue, int destValue) {
        string s,d;
        getpath(root,startValue,s);
        getpath(root,destValue,d);

        while(min(s.size(),d.size())> 0 && s.back() == d.back()){
            s.pop_back();
            d.pop_back();
        }
        return string (s.size(),'U')+string(rbegin(d),rend(d));   
    }
};
